<!DOCTYPE html>
<html lang="en">
<head>
  <meta charset="UTF-8">
  <meta http-equiv="X-UA-Compatible" content="IE=edge,chrome=1">
  <title>Editor</title>
  <style type="text/css" media="screen">
    body {
        overflow: hidden;
    }

    .myMarker {
        position:absolute;
        background:rgb(255, 0, 0);
        z-index:20
    }

    #editor {
        margin: 0;
        position: absolute;
        top: 0;
        bottom: 50%;
        left: 0;
        right: 50%;
    }

    .right {
        overflow-y: auto;
        margin: 0;
        position: absolute;
        top: 0;
        bottom: 0;
        left: 52%;
        right: 0;
    }

    .run {
        overflow-y: auto;
        top: 50%;
        bottom: 0;
        left: 2%;
        right: 50%;
        position: absolute;
    }
  </style>

    <link href="https://cdn.jsdelivr.net/npm/bootstrap@5.2.3/dist/css/bootstrap.min.css" rel="stylesheet" integrity="sha384-rbsA2VBKQhggwzxH7pPCaAqO46MgnOM80zW1RWuH61DGLwZJEdK2Kadq2F9CUG65" crossorigin="anonymous">
    <script src="https://cdn.jsdelivr.net/npm/bootstrap@5.2.3/dist/js/bootstrap.bundle.min.js" integrity="sha384-kenU1KFdBIe4zVF0s0G1M5b4hcpxyD9F7jL+jjXkk+Q2h455rYXK/7HAuoJl+0I4" crossorigin="anonymous"></script>
</head>
<body>

    <pre id="editor"></pre>

    <div class="run">
        <table class="table">
            <thead>
              <tr>
                <th scope="col">#</th>
                <th scope="col">Input(s)</th>
                <th scope="col">Expected</th>
                <th scope="col">Actual</th>
                <th scope="col">Status</th>
              </tr>
            </thead>
            <tbody id="tbody">
              
            </tbody>
          </table>
        <button class="btn btn-primary" id="run">Run</button>
        <button class="btn btn-success">Submit</button>
    </div>

    <div class="right">
        <h1>Coding Interface</h1>
        <h3>Problem Description:</h3>

        <p id="p-desc"></p>
    </div>

    <div>
        <span id="filename"></span>
    </div>

    <script src="https://cdn.jsdelivr.net/npm/showdown@2.1.0/dist/showdown.min.js"></script>


    <script src="https://cdn.jsdelivr.net/npm/ace-builds@1.14.0/src-noconflict/ace.js" type="text/javascript" charset="utf-8"></script>
    <script>
        var editor = ace.edit("editor");
        editor.setTheme("ace/theme/twilight");
        editor.session.setMode("ace/mode/python");
            
    </script>

    <script>
        var converter = new showdown.Converter();
        function countInstances(string, word) {
            return string.split(word).length - 1;
        }

        fetch("/api/problem")
        .then(response => response.json())
        .then(data => {
                var boilerplate = ""

                for (let i=1; i<=countInstances(data["boilerplate-python"], "\n"); i++) {
                    boilerplate += String(i) + "\n"
                }

                console.log(boilerplate)
                boilerplate += data["boilerplate-python"]
                document.getElementById("p-desc").innerHTML = converter.makeHtml(data.description);

                console.log(boilerplate)
                editor.setValue(data["boilerplate-python"])

                document.getElementById("filename").innerText = data["filename"]

                for (let i=0; i<data["checks"]["inputs"].length; i++) {
                    var args = ""
                    for (let j=0; j<data["arguments"].length; j++) {
                        if (typeof(data["checks"]["inputs"][i][j]) === typeof([])) {
                            args += data["arguments"][j] + " = " + "[" + data["checks"]["inputs"][i][j] + "]" + "\n"
                        } else {
                            args += data["arguments"][j] + " = " + data["checks"]["inputs"][i][j] + "\n"
                        }
                    }
                    var tr = document.createElement("tr")
                    var th = document.createElement("th")
                    th.scope = "row"
                    th.innerText = i + 1
                    var tdInput = document.createElement("td")
                    tdInput.innerText = args
                    
                    var tdExpected = document.createElement("td")
                    tdExpected.innerText = data["checks"]["outputs"][i]

                    var tdActual = document.createElement("td")
                    tdActual.id = "actual-" + i
                    tdActual.innerText = "N/A"

                    var tdStatus = document.createElement("td")
                    tdStatus.id = "check-" + i
                    tdStatus.innerHTML = "<span class='badge text-bg-secondary'>Unknown</span>"

                    tr.appendChild(th)
                    tr.appendChild(tdInput)
                    tr.appendChild(tdExpected)
                    tr.appendChild(tdActual)
                    tr.appendChild(tdStatus)

                    document.getElementById("tbody").appendChild(tr)
                }

        })

        document.getElementById("run").onclick = () => {
            fetch("/api/compile", {
                method: "POST",
                headers: {
                    'Content-Type': 'application/json'
                },
                body: JSON.stringify({
                    "code": editor.getValue(),
                    "filename": document.getElementById("filename").innerText,
                    "type": "checks"
                })
            })
            .then(response => response.json())
            .then(data => {
                if (data.code === undefined) {
                    for (let i=0; i<data.length; i++) {
                        if (data[i] === true) {
                            document.getElementById("check-" + i).innerHTML = "<span class='badge text-bg-success'>Success</span>"
                            document.getElementById("actual-" + i).innerText = "<---"
                        } else {
                            document.getElementById("actual-" + i).innerText = data[i]["Actual"]
                            document.getElementById("check-" + i).innerHTML = "<span class='badge text-bg-danger'>Failure</span>"
                        }
                    }
                } else {
                    for (let i=0; i<data.checks; i++) {
                        document.getElementById("actual-" + i).innerText = "One of your testcases caused following error: " + data.error
                        document.getElementById("check-" + i).innerHTML = "<span class='badge text-bg-warning'>Error</span>"
                    }
                    // var errorLineNum = data.error.split("Line ")[0].split("\n")[2].slice("-1"); // Potential Error: if user printed output the string literal Line
                    // console.log(errorLineNum)
                    // editor.getSession().setAnnotations([{
                    //     row: errorLineNum-1,
                    //     column: 0,
                    //     text: data.error.split("Line ")[0].split("\n")[2],
                    //     type: "error" // also warning and information
                    // }]);
                }
                console.log(data)
            })
        }
    </script>


</body>
</html>